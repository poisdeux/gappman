-------------------------------------------------------------------------------
1. Coding style
-------------------------------------------------------------------------------

GAppMan is written in the so-called Allman style. Hence, the brace following
a control statement is put on the next line on the same indentation level as 
the control statement. Statements inside the braces are indented one level 
deeper.

To get your code pretty-printed in the Allman style you can use the program
"indent" as follows:

  indent -bap -bli0 -i4 -l79 -ncs -npcs -npsl -fca -lc79 -fc1 -ts4 \
    <SOURCECODEFILE>

NOTE: above automatic pretty-printing may cause doxygen comments like ///< 
to be rewritten as // /< which causes doxygen to fail.
The following command will pretty-print the code and fix the doxygen comments:

find -name '*.[ch]' -type f \ 
 -exec indent -bap -bli0 -i4 -l79 -ncs -npcs -npsl -fca -lc79 -fc1 -ts4 {} \; \
 -exec sed -i 's@// /<@///<@' {} \;

-------------------------------------------------------------------------------
2. Version number scheme
-------------------------------------------------------------------------------

The following versioning scheme is used by gappman.

<MAJOR>.<MINOR>[.<MAINTENANCE/UPDATE>]

*  MAJOR version releases represent a complete implementation of a set of major
   features. NOTE: the major set for the 1.0 release still has to be 
   determined. 
*  MINOR version releases include one or more major features, design changes, 
   and interface changes.
*  MAINTENANCE/UPDATE releases are optional and include bugfixes, security fixes, 
   new applets.

Only integers are allowed as versionnumbers.
For example, the following versions are accepted:

0.3
0.3.1
1.9.12
1.13.1
1.23.17

Where 23 > 13 > 3. Therefore, the above versions are increasing from top to 
bottom.

-----------------------------------------------------------------------------
3. Creating a new release version from trunk
-----------------------------------------------------------------------------

1. Make a branch to test and debug the release

  svn copy https://gappman.googlecode.com/svn/trunk/ \
    https://gappman.googlecode.com/svn/branches/<MAJOR>.<MINOR>

2. Edit the Changelog and raise the version number in configure.ac

3. Check the libs/ versions and change if necessary. See libs/README-DEVELOPERS 
   for details.

4. Commit the changes on the branch

  svn commit -m "New branch <MAJOR>.<MINOR>"

5. After testing and debugging commit the changes, if any. 

6. Make a release version

  svn copy https://gappman.googlecode.com/svn/branches/<MAJOR>.<MINOR> \
    https://gappman.googlecode.com/svn/tags/release-<MAJOR>.<MINOR>

7. Commit the new release

  svn commit -m "New release <MAJOR>.<MINOR>"

-----------------------------------------------------------------------------
4. Creating a maintenance release
-----------------------------------------------------------------------------

Maintenance/update releases should be tested on the branch and result in a 
<MAJOR>.<MINOR>.<MAINTENANCE/UPDATE> version.

1. Merge wanted/needed changes from trunk to branch.
	 NOTE: svn has a problem merging repos where dirs or files are moved or 
         deleted. ALWAYS CHECK!!!

	cd gappman/branch/<MAJOR>.<MINOR>
  svn merge --reintegrate https://gappman.googlecode.com/svn/trunk  

2. Fix conflicts and commit the merge

	svn commit -m "Merge from trunk for upcoming release"

3. Test the merge and fix any issues on the branch

  autoreconf -i
  ./configure
  make
  ./tests/rungappman.sh

4. Create a new clean checkout and build and test the new release. Fix any
	 issues on the branch (ofcourse)

	TMPDIR=$(mktemp -d)
	pushd ${TMPDIR}
	svn checkout http://gappman.googlecode.com/svn/branches/<MAJOR>.<MINOR> \
		gappman-read-only

	pushd gappman-read-only
	autoreconf -vif
	./configure
	make
	./tests/rungappman.sh
	popd
	popd
	rm -rf ${TMPDIR}
 
5. Edit the Changelog. Raise the version number in configure.ac

6. Commit the changes on the branch

  svn commit -m "New maintenance version <MAJOR>.<MINOR>.<MAINTENANCE/UPDATE>"

7. Make a maintenance release version
 
  svn copy https://gappman.googlecode.com/svn/branches/RELEASEVERSION \
    https://gappman.googlecode.com/svn/tags/release-RELEASEVERSION.x


-----------------------------------------------------------------------------
5. Create a downloadable version of the release
-----------------------------------------------------------------------------

1. Go to the release version

  cd tags/release-RELEASEVERSION

2. Create the makefiles

  autoreconf -vif
  ./configure

3. Create the tarball as follows:

  make dist

4. Test if the tarball builds

  TMPDIR=$(mktemp -d)
  cp gappman-*.tar.gz ${TMPDIR}
  pushd ${TMPDIR}
  tar xzf gappman-*.tar.gz
  cd gappman-*
  ./configure
  make
  ./tests/rungappman.sh
  popd
  rm -rf ${TMPDIR}

5. If step 4 was succesful you may upload the tarball to the website.

-----------------------------------------------------------------------------
6. Checking the code
-----------------------------------------------------------------------------

Splint generates a lot of false positives. A better tool might be cppcheck.
http://sourceforge.net/projects/cppcheck/
It supposedly also works for C-code...

Splint might be a nice tool to check the code for security vulnerabilities and 
coding mistakes. It can be executed as follows:

splint +charint -warnposix -paramuse -nullpass \
	-I `pkg-config gtk+-2.0 --cflags` `pkg-config libxml-2.0 --cflags` \
	-I./libs/connect/ -I./libs/generic/ -I./libs/layout/ -I./libs/parseconf/ \
  	<SOURCEFILE>

It currently shows a lot of warnings.

We use the following parameters to reduce the amount of warnings:

  -paramuse			As we use callbacks for GTK there are functions which
					contain parameters that are not always used in the 
					function
  -nullpass			Some of the gm functions use NULL as an indication that
					the default should be used. Example: gm_show_error_dialog
					where the callback may be NULL to use the default callback
					function that destroys the dialog upon pressing the 
					close-button.
  -warnposix		the posix libs make splint barf about bugs in the posix libraries.
					Unless we intend to debug these libs we can ignore the posix warnings.
  +charint			We use get_opts to parse commandline options. As we use chars in the 
					switch-statement to select the commandline options, we use chars in the 
					long_options struct, although the struct requires type int. As long as
					we use the same chars in the struct as in the switch-statement there is
					no problem. Hence, we may ignore these warnings.
