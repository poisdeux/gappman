-------------------------------------------------------------------------------
1. Coding style
-------------------------------------------------------------------------------

GAppMan is written in the so-called Allman style. Hence, the brace following
a control statement is put on the next line on the same indentation level as 
the control statement. Statements inside the braces are indented one level 
deeper.

To get your code pretty-printed in the Allman style you can use the program
"indent" as follows:

  indent -bap -bli0 -i4 -l79 -ncs -npcs -npsl -fca -lc79 -fc1 -ts4 \
    <SOURCECODEFILE>

NOTE: above automatic pretty-printing may cause doxygen comments like ///< 
to be rewritten as // /< which causes doxygen to fail.

When coding try to follow the following guidelines:

* Avoid routines larger than 200 lines of code. Excluding comments and 
  whitespace.
* When using call-by-refrence, put parameters in input-modify-output order.
  e.g. calculate_max_elts(struct menu *dish, int *max_elts)
  Here dish is the input parameter and max_elts the output parameter
* Use const parameters when a routine does not change the parameter value
* When different routines use similar parameters use consistent parameter 
  ordering
* Status is returned by value or should be last in the parameter list
* Put complex code in a separate routine with a self-explanatory name
* Each public routine must be documented. Documentation should contain
  a brief description and each parameter and the return value must be 
  documented.
* Encapsulate global data in a struct providing it a descriptive name
* Provide descriptive names for routines. Use _ as word separator.
* Put constants on the left side of comparisons (i.e. if ( MAX_ITEMS == i ) )
  to let the compiler warn for errors like: if ( MAX_ITEMS = i ).

-------------------------------------------------------------------------------
2. Version number scheme
-------------------------------------------------------------------------------

The following versioning scheme is used by gappman.

<MAJOR>.<MINOR>[.<MAINTENANCE/UPDATE>]

*  MAJOR version releases represent a complete implementation of a set of major
   features. Raising this number requires magic.
*  MINOR version releases include one or more major features, design changes, 
   and interface changes.
*  MAINTENANCE/UPDATE releases are optional and include bugfixes, security fixes, 
   new applets.

Only integers are allowed as versionnumbers.
For example, the following versions are accepted:

0.3
0.3.1
1.9.12
1.13.1
1.23.17

Where 23 > 13 > 3. Therefore, the above versions are increasing from top to 
bottom.

-----------------------------------------------------------------------------
3. Creating a new release version from trunk
-----------------------------------------------------------------------------

1. Make a branch to test and debug the release

   git branch <VERSION>-alpha
	 git checkout <VERSION>-alpha

2. Edit the Changelog and raise the version number in configure.ac

3. Check the libs/ versions and change if necessary. See libs/README-DEVELOPERS 
   for details.

4. After testing and debugging commit the changes, if any. 

   git commit

5. Do a final release test. See section "5. Testing ..."

6. Make a release version

   git tag release-<VERSION>

7. Merge changes back to master

   git checkout master
   git merge <VERSION>-alpha

8. Delete branch

   git branch -d <VERSION>-alpha

9. Push changes to remote

   git push 
   git push --tags
 
-----------------------------------------------------------------------------
4. Creating a maintenance release
-----------------------------------------------------------------------------

Maintenance/update releases should be tested on the branch and result in a 
<MAJOR>.<MINOR>.<MAINTENANCE/UPDATE> version.

1. Make a branch of the release you want to update

   git checkout -b release-<MAINTENANCE-VERSION>-alpha release-<VERSION>
	 
2. Edit the Changelog and raise the version number in configure.ac

3. After testing and debugging commit the changes, if any. 

   git commit

4. Do a final release test. See section "5. Testing ..."

5. Make a release version

   git tag release-<VERSION>

6. Merge changes back to master

   git checkout master
   git merge <VERSION>-alpha

7. Delete branch

   git branch -d <VERSION>-alpha

8. Push changes to remote

   git push 
   git push --tags
 
-----------------------------------------------------------------------------
5. Testing to ensure essential stuff is in git repo
-----------------------------------------------------------------------------

1. Create a new clean checkout and build and test the new release. Fix any
     issues on the branch (ofcourse)

    TMPDIR=$(mktemp -d)
    pushd ${TMPDIR}
    git clone https://code.google.com/p/gappman/

    pushd gappman
		git checkout release-<VERSION>-alpha
    libtoolize
    pushd libs
    libtoolize
    popd
    autoreconf -vif
    ./configure
    make
    ./tests/rungappman.sh
    popd
    popd
    rm -rf ${TMPDIR}
 

-----------------------------------------------------------------------------
5. Create a downloadable version of the release
-----------------------------------------------------------------------------

1. Create a new branch

   git checkout -b package release-<VERSION>

2. Create the makefiles

  cd package
  libtoolize
  pushd libs
  libtoolize
  popd
  autoreconf -vif
  ./configure


3. Create the tarball as follows 
   (make sure all dependencies are installed, e.g. doxygen):

  make dist

4. Test if the tarball builds

  TMPDIR=$(mktemp -d)
  cp gappman-*.tar.gz ${TMPDIR}
  pushd ${TMPDIR}
  tar xzf gappman-*.tar.gz
  cd gappman-*
  ./configure
  make
  ./tests/rungappman.sh
  popd
  rm -rf ${TMPDIR}

5. If step 4 was succesful you may upload the tarball to the website.

-----------------------------------------------------------------------------
6. Checking the code
-----------------------------------------------------------------------------

Splint generates a lot of false positives. A better tool might be cppcheck.
http://sourceforge.net/projects/cppcheck/
It supposedly also works for C-code...



