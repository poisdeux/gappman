
GUI
===

The processmanager widget must obtain the list of programs from gappman.
This cannot be obtained from the configuration file as the PIDs are 
needed to manage the processes. These are known when the program is 
started and therefore not available from the configuration file.

Processmanager should show the Programname, Logo, and State in a
table format:

+-------------+-------+
| Logo        | State |
| Programname |       |
+-------------+-------+
| ....        |  ...  |
+-------------+-------+
| ....        |  ...  |
+-------------+-------+
| CANCEL |
+--------+

Selection should be highlighted per row and pressing spacebar should
provide the user with a dialog allowing her to choose what action to
perform.

+------------------+------------------+
| Programname      | State            |
+------------------+---------+--------+
| button:          | button: |
| Stop PROGRAMNAME | Cancel  |
+------------------+---------+

When the stop button is pressed the signals sent are depended on the state
of the program.

* Running: TERM 
* Sleeping (Interruptible): TERM 
* Waiting (Uninterruptible): KILL
* Stopped: KILL
* Zombie: Restart parent process

Zombie processes are a bit harder to kill. The parent should be restarted
or killed. This would be gappman and therefore gappman should be able to 
handle the HUP signal. 
Note that zombie processes would indicate a bug in gappman as these are not
supposed to happen.


Protocol
========

The processmanager will query the gappman daemon about which processes
were started and what their status is. For this the following protocol
will be used.

::listprocesses::

will return a list of processes with their status as follows:

::name::pid::[name::pid::]...


Removing an appwidgetinfo linked list
=====================================

We use a prev and next pointer to easily remove elements from the
linked list.

Suppose A points to B and B points to C. To remove B we must
link A and C. As B both points to its left and right neighbour
we can simply remove B by looking at B->prev and B->next.
As B->prev is A. We can let A->next point to C. As B->next points
to C, we can have C->prev point to A. Effectively removing B from
the linked list.
After this B can be freed.


